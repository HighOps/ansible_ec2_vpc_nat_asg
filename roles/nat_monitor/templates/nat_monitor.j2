#!/bin/bash
#
# {{ ansible_managed }}
# 
# nat_monitor       This shell script takes care of starting and stopping
#                   nat_monitor.sh
#  
# chkconfig: - 58 74
# description: nat_monitor.sh is a script given as an example for managing \
# highly available NAT instances in a multi-az VPC infrastructure.
#
### BEGIN INIT INFO
# Provides: nat_monitor
# Required-Start: $network $local_fs
# Required-Stop: $network $local_fs
# Should-Start: $syslog 
# Should-Stop: $syslog 
# Short-Description: start and stop nat_monitor.sh
# Description: nat_monitor.sh is a script given as an example for managing
#               highly available NAT instances in a multi-az VPC infrastructure.
### END INIT INFO

# Source function library.
. /etc/init.d/functions

RETVAL=0
PIDFILE=/var/run/nat_monitor.pid

PROG=nat_monitor
EXEC=/opt/nat_monitor/nat_monitor.sh
LOCKFILE=/var/lock/subsys/$PROG

start() {
    echo -n "Starting $PROG: "
    if [ -f $PIDFILE ]; then
        PID=`cat $PIDFILE`
        echo $PROG already running: $PID
        exit 2;
    else
        daemon --pidfile="$PIDFILE" $EXEC
        RETVAL=$?
        echo
        [ $RETVAL -eq 0 ] && touch $LOCKFILE
        return $RETVAL
    fi
}

stop() {
    echo -n "Shutting down $PROG: "
    killproc -p "$PIDFILE" $EXEC
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && rm -f $LOCKFILE
    return $RETVAL 
}

rhstatus() {
    status -p "$PIDFILE" -l $PROG $EXEC
}

restart() {
    stop
    start
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        rhstatus 
        ;;
    *)
        echo "Usage: $PROG {start|stop|restart|status}"
        exit 1
        ;;
esac
exit $?
